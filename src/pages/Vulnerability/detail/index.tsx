import NoData from '@/components/NoData';
import { PageBreadCrumb, PageTitle } from '@/components/PageHeader';
import TzPageContainer from '@/components/lib/ProComponents/TzPageContainer';
import TzProDescriptions, {
  renderWithLinkEllipsis,
} from '@/components/lib/ProComponents/TzProDescriptions';
import { TzCard } from '@/components/lib/tz-card';
import { useSeverityEnum } from '@/hooks/enum/useSeverityEnum';
import { ZH_LANG } from '@/locales';
import RenderColWithIcon from '@/pages/components/RenderColWithPlatformIcon';
import { renderCommonStatusTag } from '@/pages/components/RenderRiskTag';
import { getVulnerabilityInfo } from '@/services/cspm/Vulnerability';
import { toDetailIntercept } from '@/utils';
import { DATE_TIME } from '@/utils/constants';
import { getLocale } from '@@/exports';
import { history, useIntl, useParams, useRouteProps } from '@umijs/max';
import { useMemoizedFn, useSize } from 'ahooks';
import classNames from 'classnames';
import dayjs from 'dayjs';
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import Graph from './graph';
import './index.less';
import { IInfo, renderAnaly, renderChangeLog } from './renderText';
import ArrowA1 from './svg/arrow-a1.svg';
import ArrowA2 from './svg/arrow-a2.svg';
import ArrowA3 from './svg/arrow-a3.svg';

function ProcessLog(props: {
  list?: React.ReactNode[];
  border?: boolean;
  className?: string;
}) {
  const { list, border, className } = props;
  const refWrap = useRef(null);
  const refImg = useRef(null);
  const wrapSize = useSize(refWrap);
  const imgSize = useSize(refImg);
  const imgNum =
    wrapSize?.height && imgSize?.height
      ? Math.max(0, Math.floor(wrapSize?.height / imgSize?.height) - 1)
      : 5;

  if (!list) {
    return <NoData size={'middle'} />;
  }
  return (
    <div className={classNames('process-log-n2', className)} ref={refWrap}>
      <div className={'kzl-32'}>
        <img src={ArrowA2} alt="" ref={refImg} />
        {Array(imgNum)
          .fill(1)
          .map((_, idx) => (
            <img src={ArrowA3} alt="" key={idx} />
          ))}
        {(imgNum > 0 || list?.length > 1) && <img src={ArrowA1} alt="" />}
      </div>
      {list.map((item, idx) => {
        return (
          <div key={idx} className={`item_node ${border && 'border'}`}>
            <div className={'text'}>{item}</div>
          </div>
        );
      })}
    </div>
  );
}

const VulnerabilityDetail: React.FC<unknown> = () => {
  const { breadcrumb } = useRouteProps();
  const id: any = useParams().id;
  const [loading, setLoading] = useState(true);
  const [info, setInfo] = useState<IInfo>({} as any);
  const [fullGraph, setFull] = useState(false);
  const intl = useIntl();
  const isZh = getLocale() === ZH_LANG;
  const { getSeverityTagInfoByStatus: getTagInfoByStatus } = useSeverityEnum();

  const translate = useMemoizedFn((id, val?: any) =>
    intl.formatMessage({ id }, val),
  );

  const fetchInfo = useMemoizedFn(async () => {
    const res = await getVulnerabilityInfo(id);
    setInfo(res);
    setLoading(false);
  });
  useEffect(() => {
    fetchInfo();
  }, []);

  const infoColumns = [
    {
      title: translate('cloudAccount'),
      className: 'btn-row',
      render: (_: any, record: API.VulnerabilityInfo) => {
        return (
          <RenderColWithIcon
            className={'cloud-account-al'}
            platform={record.cloud_platform}
            name={renderWithLinkEllipsis(
              record.credential_name || '-',
              record,
              () =>
                toDetailIntercept(
                  { type: 'credential', id: record.credential_id },
                  () =>
                    history.push(
                      `/sys/cloud-platform/info/${record.credential_id}`,
                    ),
                ),
            )}
          />
        );
      },
    },
    {
      title: translate('creationTime'),
      dataIndex: 'created_at',
      render: (_: any, record: API.VulnerabilityInfo) => {
        return dayjs(record.created_at).format(DATE_TIME);
      },
    },
    {
      title: translate('lastSeen'),
      dataIndex: 'last_find_at',
      render: (_: any, record: API.VulnerabilityInfo) => {
        return dayjs(record.last_find_at).format(DATE_TIME);
      },
    },
    {
      title: translate('stillExists'),
      dataIndex: 'status',
      render: (_: any, record: API.VulnerabilityInfo) => {
        return translate(!record.status ? 'yes' : 'no');
      },
    },
    {
      title: translate('securityVulnerability'),
      dataIndex: isZh ? 'security_threat' : 'security_threat_en',
    },
  ];

  const analyseList = useMemo(() => renderAnaly(info), [info]);

  const changelog = useMemo(() => renderChangeLog(info), [info]);

  const onFull = useMemoizedFn((isFull) => {
    setFull(isFull);
  });

  const Icons = useMemo(
    () => [
      {
        label: translate('cloudHosting'),
        icon: 'icon-zhujimingcheng',
        color: '#2177D1',
      },
      {
        label: translate('objectStorage'),
        icon: 'icon-a-yuncunchu1',
        color: '#11C6A5',
      },
      {
        label: translate('exploitableVulnerabilities'),
        icon: 'icon-xingzhuangjiehe',
        color: '#DC0000',
      },
    ],
    [],
  );
  const graphNode = useMemo(
    () => (
      <TzCard
        rootClassName={classNames('g6v1d', { full: fullGraph })}
        title={translate('vulnerabilityChainVisualization')}
        style={{ marginTop: fullGraph ? 0 : 12 }}
        bodyStyle={{ paddingTop: 0 }}
      >
        <div className="icons-flex-vb2">
          {Icons.map((iconItem) => (
            <div key={iconItem.icon}>
              <i
                className={`icon iconfont ${iconItem.icon}`}
                style={{ color: iconItem.color }}
              ></i>
              <span>{iconItem.label}</span>
            </div>
          ))}
        </div>
        {info?.chain_data ? (
          <Graph info={info} onFull={onFull} full={fullGraph} />
        ) : (
          <NoData size={'middle'} />
        )}
      </TzCard>
    ),
    [info?.chain_data, fullGraph],
  );

  const infoName = isZh ? info?.name : info?.name_en;
  return (
    <TzPageContainer
      header={{
        title: (
          <PageTitle
            title={infoName ?? '-'}
            tag={
              <div className="ml-3 -mt-[6px]">
                {renderCommonStatusTag(
                  {
                    getTagInfoByStatus,
                    status: info.severity,
                  },
                  { size: 'small' },
                )}
              </div>
            }
          />
        ),
        breadcrumb: <PageBreadCrumb items={breadcrumb} />,
      }}
    >
      <TzCard
        title={translate('basicInfo')}
        id="1"
        bodyStyle={
          loading ? { padding: '4px 16px 16px 16px' } : { paddingTop: 4 }
        }
        className="is-descriptions"
      >
        <TzProDescriptions
          loading={loading}
          dataSource={info as any}
          columns={infoColumns}
        />
      </TzCard>

      {fullGraph ? createPortal(graphNode, document.body) : graphNode}

      <TzCard
        id="3"
        title={translate('vulnerabilityChainPathAnalysis')}
        bodyStyle={{ paddingTop: 0 }}
        className="mt-3"
      >
        <ProcessLog border list={analyseList} className="analyse-list" />
      </TzCard>
      <TzCard
        id="4"
        title={translate('vulnerabilityPointChangeLog')}
        style={{ backgroundColor: '#F4F6FA' }}
        bodyStyle={{ paddingTop: 0 }}
        className="mt-3"
      >
        <ProcessLog list={changelog} />
      </TzCard>
    </TzPageContainer>
  );
};

export default VulnerabilityDetail;
