import TzPageContainer from '@/components/lib/ProComponents/TzPageContainer';
import TzProTable, {
  TzProColumns,
  onRowClick,
} from '@/components/lib/ProComponents/TzProTable';
import TzFilter from '@/components/lib/TzFilter';
import useTzFilter, {
  FilterContext,
} from '@/components/lib/TzFilter/useTzFilter';
import TzFilterForm from '@/components/lib/TzFilterForm';
import { FilterFormParam } from '@/components/lib/TzFilterForm/filterInterface';
import { useSeverityEnum } from '@/hooks/enum/useSeverityEnum';
import useCredentials from '@/hooks/useCredentials';
import useTableAnchor from '@/hooks/useTableAnchor';
import RenderColWithIcon from '@/pages/components/RenderColWithPlatformIcon';
import { renderCommonStatusTag } from '@/pages/components/RenderRiskTag';
import { geVulnerabilityList } from '@/services/cspm/Vulnerability';
import { DATE_TIME } from '@/utils/constants';
import { ActionType } from '@ant-design/pro-components';
import { history, useIntl } from '@umijs/max';
import { useMemoizedFn } from 'ahooks';
import dayjs from 'dayjs';
import React, { useMemo, useRef, useState } from 'react';
// import Highlighter from 'react-highlight-words';
// import { getLocale } from '@@/exports';
// import { ZH_LANG } from '@/locales';

const Vulnerability: React.FC<unknown> = () => {
  const actionRef = useRef<ActionType>();
  const anchorRef = useRef<HTMLDivElement>(null);
  const filterToRef = useRef<HTMLDivElement>(null);
  const listOffsetFn = useTableAnchor(anchorRef);
  const cloudAccount = useCredentials();
  const intl = useIntl();
  const translate = useMemoizedFn((id, val?: any) =>
    intl.formatMessage({ id }, val),
  );
  const {
    vulnerabilitySeverityOption,
    getSeverityTagInfoByStatus: getTagInfoByStatus,
  } = useSeverityEnum();
  // const isZh = getLocale() === ZH_LANG;

  const columns: TzProColumns<API.VulnerabilityItem>[] = [
    {
      title: translate('vulnerabilityChain'),
      dataIndex: 'name',
      ellipsis: {
        showTitle: true,
      },
      tzEllipsis: 2,
    },
    {
      title: translate('severity'),
      dataIndex: 'severity',
      ellipsis: {
        showTitle: true,
      },
      align: 'center',
      width: '10%',
      render: (_, { severity }) =>
        renderCommonStatusTag(
          {
            getTagInfoByStatus,
            status: severity,
          },
          { size: 'small' },
        ),
    },
    {
      title: translate('cloudAccount'),
      dataIndex: 'credential_name',
      tzEllipsis: 2,
      width: '20%',
      ellipsis: {
        showTitle: true,
      },
      render: (_, record) => {
        return (
          <RenderColWithIcon
            platform={record.cloud_platform}
            name={record.credential_name}
          />
        );
      },
    },
    {
      title: translate('creationTime'),
      dataIndex: 'updated_at',
      width: '16%',
      render: (_, record) => {
        return dayjs(record.created_at).format(DATE_TIME);
      },
    },
    {
      title: translate('lastSeen'),
      dataIndex: 'last_find_at',
      width: '16%',
      render: (_, record) => {
        return dayjs(record.last_find_at).format(DATE_TIME);
      },
    },
    {
      title: translate('stillExists'),
      dataIndex: 'status',
      align: 'center',
      width: '10%',
      render: (_, record) => {
        return translate(!record.status ? 'yes' : 'no');
      },
    },
  ];

  const filterData: FilterFormParam[] = useMemo(
    () => [
      {
        label: translate('vulnerability'),
        name: 'name',
        type: 'input',
        icon: 'icon-lian',
      },
      {
        label: translate('severity'),
        name: 'severities',
        type: 'select',
        icon: 'icon-chengdu',
        props: {
          mode: 'multiple',
          options: vulnerabilitySeverityOption,
        },
      },
      {
        label: translate('cloudAccount'),
        name: 'credential_ids',
        type: 'select',
        icon: 'icon-yonghujiaose',
        props: {
          mode: 'multiple',
          options: cloudAccount,
        },
      },
      {
        label: translate('stillExists'),
        name: 'status',
        type: 'select',
        icon: 'icon-shifou',
        props: {
          mode: 'multiple',
          options: [
            {
              label: translate('yes'),
              value: 0,
            },
            {
              label: translate('no'),
              value: 1,
            },
          ],
        },
      },
    ],
    [cloudAccount, vulnerabilitySeverityOption],
  );
  const dataFilter = useTzFilter({ initial: filterData });
  const [filterVal, setFilterVal] = useState<any>({});

  const requestFn = useMemoizedFn(
    async ({ pageSize: size, current: page, ...filter }) => {
      const { total, items } = await geVulnerabilityList({
        size,
        page,
        ...filter,
      });
      return { total, data: items || [] };
    },
  );

  return (
    <TzPageContainer
      header={{
        title: translate('vulnerabilityChainList'),
      }}
      extra={<div ref={filterToRef}></div>}
    >
      <div className="absolute top-0" ref={anchorRef} />
      <FilterContext.Provider value={{ ...dataFilter }}>
        <div className="flex gap-x-[6px]">
          <TzFilter />
          <TzFilterForm
            className="align-center-input"
            onChange={setFilterVal}
          />
        </div>
      </FilterContext.Provider>

      <TzProTable<API.VulnerabilityItem>
        onChange={listOffsetFn}
        className="mt-2"
        actionRef={actionRef}
        params={filterVal}
        request={requestFn}
        columns={columns}
        onRow={(record) => {
          return {
            onClick: () =>
              onRowClick(() =>
                history.push(`/vulnerability/detail/${record.id}`),
              ),
          };
        }}
      />
    </TzPageContainer>
  );
};

export default Vulnerability;
