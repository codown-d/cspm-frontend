// @ts-nocheck
import TzSelect from '@/components/lib/tzSelect';
import G6 from '@antv/g6';
import { useMemoizedFn } from 'ahooks';
import { useEffect, useMemo, useRef, useState } from 'react';
import { flushSync } from 'react-dom';
import './Custom';
import { NodeTooltips } from './components';
import './index.less';

const SizeRatioOpts = [
  {
    label: '100%',
    value: 2,
  },
  {
    label: '75%',
    value: 1.75,
  },
  {
    label: '50%',
    value: 1.5,
  },
  {
    label: '25%',
    value: 1.25,
  },
  {
    label: '0%',
    value: 1,
  },
  {
    label: '-25%',
    value: 0.75,
  },
  {
    label: '-50%',
    value: 0.5,
  },
  {
    label: '-75%',
    value: 0.25,
  },
  {
    label: '-100%',
    value: 0.075,
  },
];

interface IProps {
  info: API.VulnerabilityInfo;
  full: boolean;
  onFull: any;
}
function Graph(props: IProps) {
  const { onFull, full, info } = props;
  const chainData = info?.chain_data || {};
  const hostExitMap = info?.assets_exist_map || {};
  const containerRef = useRef<HTMLElement>(null);
  const graphRef = useRef<any>(null);
  const currentNodeRef = useRef<any>(null);
  const timer = useRef(null);
  // 节点tooltip坐标
  const [nodeTooltip, setNodeToolTip] = useState<null | {
    x: number;
    y: number;
    hash_id: string;
  }>(null);
  const [sizeRatio, setRatio] = useState(1);

  const graphData = useMemo(() => {
    if (!chainData) {
      return [];
    }
    const hosts = chainData.hosts || [];
    const yPosition = 180;
    return {
      nodes: [
        {
          id: 'internet',
          type: 'InternetCircle',
          x: 20,
          y: yPosition + 10,
        },
        {
          id: 'internet-text',
          type: 'InternetText',
          x: 20 + 4,
          y: yPosition + 78,
        },
        ...hosts.map((item, idx) => ({
          id: item.hash_id,
          type: 'ServeRect',
          // order: idx,
          data: {
            name: item.name || '-',
            id: item.instance_id || '-',
            region: item.region_name || '-',
            hashId: item.hash_id,
            // 已删除
            del: !hostExitMap[item.hash_id],
          },
          x: !idx ? 200 : 600,
          y: yPosition,
        })),
        {
          id: 'store-react-id', // chainData.s3.hash_id
          type: 'StoreRect',
          data: {
            // name: chainData.s3.name || '-',
          },
          x: 1000,
          y: yPosition - 5,
        },
        // 漏洞-card
        {
          id: 'leak-card-1',
          type: 'LeakCard',
          data: {
            name: chainData.config.risk_name || '-',
            id: chainData.config.hash_id,
          },
          x: 244,
          y: yPosition + 100,
        },
        {
          id: 'leak-card-2',
          type: 'LeakCard',
          data: {
            name: chainData.vuln[0].risk_name || '-',
            id: chainData.vuln[0].hash_id || '-',
          },
          x: 244,
          y: yPosition + 154,
        },
        {
          id: 'leakLine-left',
          type: 'LeakLineLeft',
          x: 118,
          y: yPosition + 50,
        },
        // 漏洞-线
        {
          id: 'leakLine-right',
          type: 'LeakLineRight',
          x: 760,
          y: yPosition + 50,
        },
        {
          id: 'leak-card-3',
          type: 'LeakCard',
          data: {
            name: chainData.sensitive.risk_name || '-',
            id: chainData.sensitive.hash_id,
          },
          x: 600,
          y: yPosition + 108,
        },
        {
          id: 'leak-card-4',
          type: 'LeakCard',
          data: {
            name: chainData.vuln[1].risk_name || '-',
            id: chainData.vuln[1].hash_id || '-',
          },
          x: 600,
          y: yPosition + 162,
        },
        // vpc 虚线
        {
          id: 'vpc-dotted',
          type: 'VpcDotted',
          x: 280,
          y: yPosition - 150,
          data: {
            name: chainData.vpc.name || '-',
            id: chainData.vpc.instance_id || '-',
            region: chainData.vpc.region_name || '-',
          },
        },
      ],
      edges: [
        {
          source: 'internet',
          target: hosts[0].hash_id,
          type: 'LineArrow',
          sourceAnchor: 1,
          targetAnchor: 0,
        },
        ...(hosts || []).slice(0, -1).map((item, idx) => ({
          source: item.hash_id,
          target: hosts[idx + 1].hash_id,
          type: 'LineArrow',
          sourceAnchor: 1,
          targetAnchor: 0,
        })),
        {
          source: hosts[hosts.length - 1].hash_id,
          target: 'store-react-id',
          type: 'LineArrow',
          sourceAnchor: 1,
          targetAnchor: 0,
        },
      ],
    };
  }, [info]);

  const onMouseEnter = useMemoizedFn(() => {
    clearTimeout(timer.current);
  });
  const onMouseLeave = useMemoizedFn(() => {
    const currentNode = currentNodeRef.current;
    if (!currentNode) {
      return;
    }
    const model = currentNode.getModel();
    graphRef.current.updateItem(currentNode, {
      ...model,
      data: { ...model.data, hover: false },
    });
    setNodeToolTip(null);
    currentNodeRef.current = null;
    clearTimeout(timer.current);
  });
  // 全屏
  const handleFull = useMemoizedFn(() => {
    // const target = e.target;
    const toBig = !full;
    // containerRef.current.classList.toggle('full');
    onFull(toBig);
    const { clientHeight, clientWidth } = containerRef.current ?? {};
    graphRef.current.changeSize(clientWidth, clientHeight);
    graphRef.current.fitCenter();
    // flushSync(fn);
  });
  const onChangeRatio = useMemoizedFn((v: number) => {
    setRatio(v);
    const [graphW, graphH] = [
      graphRef.current.getWidth(),
      graphRef.current.getHeight(),
    ];
    graphRef.current.zoomTo(v, { x: 0.5 * graphW, y: 0.5 * graphH }, true);
  });

  useEffect(() => {
    if (!graphRef.current) {
      // const miniMap = new G6.Minimap({
      //   size: [200, 120],
      //   className: 'minimap',
      //   type: 'delegate',
      // });
      const toolbar = new G6.ToolBar({
        className: 'toolbar_k9',
      });
      graphRef.current = new G6.Graph({
        container: containerRef.current!,
        // 是否将图适配到画布中
        fitView: false,
        // 画布上四周的留白宽度
        fitViewPadding: [8],
        modes: {
          default: ['drag-canvas', 'drag-node'],
        },
        defaultNode: {
          shape: 'node',
          // 节点文本样式
          labelCfg: {
            style: {
              fill: '#000000A6',
              fontSize: 10,
            },
          },
          // 节点默认样式
          style: {
            stroke: '#72CC4A',
            width: 150,
          },
        },
        defaultEdge: {
          shape: 'polyline',
        },
        // 节点交互状态配置
        /**
         nodeStateStyles: {
         hover: {
         stroke: 'red',
         lineWidth: 3,
         },
         },
         edgeStateStyles: {
         hover: {
         stroke: 'blue',
         lineWidth: 3,
         },
         },**/
        layout: {
          // type: 'grid',
          // rankdir: 'LR',
          // nodesep: 30,
          // ranksep: 100,
          preventOverlap: true, // 防止节点重叠
        },
        plugins: [toolbar],
      });
    }
    const bindEvents = () => {
      // 监听node上面mouse事件
      graphRef.current.on('node:mouseenter', (evt: any) => {
        const { item } = evt;
        const model = item.getModel();
        if (model.type !== 'ServeRect' || model.data.del) {
          return;
        }
        if (timer.current) {
          flushSync(onMouseLeave);
        }
        const { x, y } = model;
        const point = graphRef.current.getCanvasByPoint(x, y);
        const containerRect = containerRef.current?.getBoundingClientRect();
        const pageHeight = document.body.getBoundingClientRect().height;
        setNodeToolTip({
          x: point.x + containerRect.left - 32, // 居中
          y: pageHeight - (containerRect.top + point.y) + 30,
          hash_id: model.data.hashId,
        });
        graphRef.current.updateItem(item, {
          ...model,
          data: { ...model.data, hover: true },
        });
        currentNodeRef.current = item;
      });

      graphRef.current.on('node:mouseleave', (evt: any) => {
        const { item } = evt;
        const model = item.getModel();
        if (model.type !== 'ServeRect') {
          return;
        }
        timer.current = setTimeout(() => {
          onMouseLeave();
        }, 300);
      });
    };

    graphRef.current.data(graphData);
    graphRef.current.render();
    bindEvents();
    // 修改 toolbar
    if (containerRef.current) {
      const toolDom = containerRef.current.querySelector('.toolbar_k9');
      if (toolDom) {
        toolDom.firstElementChild.remove();
        toolDom.firstElementChild.innerHTML = `<i class="icon iconfont ${
          full ? 'icon-quxiaoquanping' : 'icon-quanping'
        }" />`;
        toolDom.children[1].innerHTML = `<i class="icon iconfont icon-fangda1" />`;
        toolDom.children[2].innerHTML = `<i class="icon iconfont icon-suoxiao" />`;
        toolDom.querySelector('[code=realZoom]')?.remove();
        toolDom.lastElementChild.innerHTML = `<i class="icon iconfont icon-dingwei1" />`;
        toolDom.firstElementChild.onclick = handleFull;
        toolDom.lastElementChild?.click();
      }
    }
    return () => {
      containerRef.current = null;
    };
  }, []);

  return (
    <div
      ref={(node) => {
        if (!containerRef.current) {
          containerRef.current = node;
        }
      }}
      className={'graph-container-v2'}
      style={{ height: full ? 'calc(100% - 54px)' : '380px' }}
    >
      <NodeTooltips
        {...nodeTooltip}
        visible={!!nodeTooltip}
        mouseleave={onMouseLeave}
        mouseenter={onMouseEnter}
      />
      {full && (
        <TzSelect
          rootClassName={'size-ratio-s2'}
          showSearch={false}
          value={sizeRatio}
          onChange={onChangeRatio}
          options={SizeRatioOpts}
        />
      )}
    </div>
  );
}

export default Graph;
