// @ts-nocheck
import G6 from '@antv/g6';
import {
  Circle,
  Group,
  Image,
  Rect,
  Text,
  createNodeFromReact,
} from '@antv/g6-react-node';
import DomainSvg from './svg/domain.svg';
import ExclamationPoint from './svg/exclamation-point.svg';
import Host from './svg/host.svg';
import HostDel from './svg/host.del.svg';
import StoreImg from './svg/store.svg';
import LeakLineLeftSvg from './svg/leak-line-left.svg';
import LeakLineRightSvg from './svg/leak-line-rigth.svg';
import VpcDottedSvg from './svg/vpc-dotted.svg';
import DelText from './svg/del-text-zh.svg';
import DelTextEn from './svg/del-text-en.svg';
import { getLocale } from '@umijs/max';
import { ZH_LANG } from '@/locales';

const isZh = getLocale() === ZH_LANG;

const fittingString = (str: string, maxWidth: number, fontSize: number) => {
  const ellipsis = '...';
  const ellipsisLength = G6.Util.getTextSize(ellipsis, fontSize)[0];
  let currentWidth = 0;
  let res = str;
  const pattern = new RegExp('[\u4E00-\u9FA5]+'); // distinguish the Chinese charactors and letters
  str.split('').forEach((letter, i) => {
    if (currentWidth > maxWidth - ellipsisLength) return;
    if (pattern.test(letter)) {
      // Chinese charactors
      currentWidth += fontSize;
    } else {
      // get the width of single letter according to the fontSize
      currentWidth += G6.Util.getLetterWidth(letter, fontSize);
    }
    if (currentWidth > maxWidth - ellipsisLength) {
      res = `${str.substr(0, i)}${ellipsis}`;
    }
  });
  return res;
};

export const LineArrow = {
  draw(cfg, group) {
    const { startPoint, endPoint } = cfg;
    return group.addShape('path', {
      attrs: {
        path: [
          ['M', startPoint.x, startPoint.y],
          ['L', endPoint.x, endPoint.y],
        ],
        stroke: '#2177D1',
        lineWidth: 3,
        startArrow: {
          // 自定义箭头指向(0, 0)，尾部朝向 x 轴正方向的 path
          path: 'M 0,-10 L 20,0 L 0,10 Z',
          // 箭头的偏移量，负值代表向 x 轴正方向移动
          // d: -10,
          // v3.4.1 后支持各样式属性
          fill: '#2177D1',
          // stroke: '#666',
          // opacity: 0.8,
          // ...
        },
        endArrow: {
          // 自定义箭头指向(0, 0)，尾部朝向 x 轴正方向的 path
          path: 'M 20,0 L 0,-10 L 0,10 Z',
          // 箭头的偏移量，负值代表向 x 轴正方向移动
          // d: -10,
          // v3.4.1 后支持各样式属性
          fill: '#2177D1',
          // stroke: '#666',
          // opacity: 0.8,
        },
      },
      // 在 G6 3.3 及之后的版本中，必须指定 name，可以是任意字符串，但需要在同一个自定义元素类型中保持唯一性
      name: 'cus-node-line-1',
    });
  },
};

export const InternetCircle = () => {
  return (
    <Group>
      <Rect
        style={{
          width: 60,
        }}
      >
        <Circle
          style={{
            r: 30,
            fill: '#fff',
            stroke: '#EEEEEE',
            lineWidth: '1',
          }}
        >
          <Image
            style={{
              img: DomainSvg,
              width: 42,
              height: 42,
              margin: [9, 9],
            }}
          />
        </Circle>
      </Rect>
    </Group>
  );
};

export const InternetText = () => {
  return (
    <Group>
      <Text style={{
        fill: '#3E4653',
        fontWeight: 500,
        fontSize: 14,
        padding: [0,0,0,0],
      }}>
        Internet
      </Text>
    </Group>
  );
};

interface ServeData {
  name: string;
  id: string;
  region: string;
  hover: boolean;
}
export const ServeRect = ({cfg}) => {
  const data: ServeData = cfg.data;
  return (
    <Group>
      <Rect
        style={{
          width: 236,
          height: 80,
          flexDirection: 'row',
          alignItems: 'center',
          fill: data.del ? '#B3BAC6' : (data.hover ? '#2D94FF' : '#2177D1'),
          radius: 8,
          padding: [0, 15],
          position: 'relative',
        }}
      >
        {data.del && (
          <Image
            style={{
              img: isZh ? DelText : DelTextEn,
              width: 24,
              height: 24,
              position: 'absolute',
              left: 0,
              top: 0,
            }}
          />
        )}
        <Circle
          style={{
            r: 19,
            fill: data.del ? 'rgba(255, 255, 255, 0.20)' : '#2177D1',
            stroke: '#fff',
            lineWidth: '1',
          }}
        >
          <Circle
            style={{
              r: 14,
              fill: '#fff',
              stroke: '#fff',
              strokeOpacity: 0.2,
              lineWidth: '4',
              margin: [5, 5],
            }}
          >
            <Image
              style={{
                img: data.del ? HostDel : Host,
                width: 16,
                height: 16,
                margin: [6, 6],
              }}
            />
          </Circle>
        </Circle>
        <Rect
          style={{
            width: 'auto',
            flexDirection: 'column',
            margin: [0, 0, 0, 20],
          }}
        >
          <Text style={{ fill: '#fff', fontSize: 14 }}>EC2</Text>
          <Text style={{ fill: '#fff', fontSize: 12, margin: [4, 0] }}>
            {fittingString(data.region, 160, 12)}
          </Text>
          <Text style={{ fill: 'rgba(255,255,255,0.7)', fontSize: 12}}>
            {fittingString(`${data.name}(${data.id})`, 160, 12)}
          </Text>
        </Rect>
      </Rect>
    </Group>
  );
};

export const StoreRect = ({ cfg }) => {
  // const data: ServeData = cfg.data;
  return (
    <Group>
      <Rect
        style={{
          minWidth: 68,
          height: 94,
          padding: [16, 8, 0, 8],
          flexDirection: 'column',
          alignItems: 'center',
          fill: '#fff',
          radius: 8,
          stroke: '#DDDDDD',
          lineWidth: '1',
        }}
      >
        <Circle
          style={{
            r: 18,
            fill: '#E6F7F2',
          }}
        >
          <Image
            style={{
              img: StoreImg,
              width: 20,
              height: 20,
              margin: [8, 8],
            }}
          />
        </Circle>
        <Text style={{ fill: '#3E4653', fontSize: 14, margin: [8, 0, 0, 0] }}>
          S3
        </Text>
      </Rect>
    </Group>
  );
};

export const LeakCard = ({ cfg }) => {
  const data: ServeData = cfg.data;
  return (
    <Group>
      <Rect
        style={{
          minWidth: 200,
          height: 44,
          padding: [14, 8, 14, 8],
          flexDirection: 'row',
          alignItems: 'center',
          justifyContent: 'center',
          fill: '#fff',
          radius: 8,
          stroke: '#DDDDDD',
          lineWidth: '1',
        }}
      >
        <Image
          style={{
            img: ExclamationPoint,
            width: 16,
            height: 16,
          }}
        />
        <Text style={{ fill: '#DC0000', fontSize: 12, margin: [0, 0, 0, 4] }}>
          {fittingString(`${data.name}`, 200, 12)}
        </Text>
      </Rect>
    </Group>
  );
};

const LeakLineLeft = () => {
  return (
    <Group>
      <Image
        style={{
          img: LeakLineLeftSvg,
          width: 160,
          // height: 16,
        }}
      />
    </Group>
  );
};

const LeakLineRight = () => {
  return (
    <Group>
      <Image
        style={{
          img: LeakLineRightSvg,
          width: 160,
          // height: 16,
        }}
      />
    </Group>
  );
};

const VpcDotted = ({cfg}) => {
  const data: ServeData = cfg.data;
  return (
    <Group>
      <Rect style={{
        height: 138,
        width: 433,
        flexDirection: 'column',
        justifyContent: 'flex-top',
      }}>
        <Image
          style={{
            img: VpcDottedSvg,
            // width: 160,
            // height: 16,
          }}
        />
        <Rect style={{
          margin: [80,0,0,210]
        }}>
          <Text style={{ fill: '#000',  textAlign: 'center', fontSize: 14 }}>VPC</Text>
          <Text style={{ fill: '#000',  textAlign: 'center', fontSize: 14, padding: [10, 0, 10, 0] }}>{data.region}</Text>
          <Text style={{ fill: '#8E97A3',  textAlign: 'center', fontSize: 12, padding: [10, 0, 10, 0] }}>{data.name}({data.id})</Text>
        </Rect>
      </Rect>
    </Group>
  );
};

G6.registerEdge('LineArrow', LineArrow, 'line');
G6.registerNode('InternetCircle', createNodeFromReact(InternetCircle), 'circle');
G6.registerNode('InternetText', createNodeFromReact(InternetText), 'single-node');
G6.registerNode('ServeRect', createNodeFromReact(ServeRect), 'rect');
G6.registerNode('StoreRect', createNodeFromReact(StoreRect), 'rect');
G6.registerNode('LeakCard', createNodeFromReact(LeakCard), 'rect');
G6.registerNode('LeakLineLeft', createNodeFromReact(LeakLineLeft), 'rect');
G6.registerNode('LeakLineRight', createNodeFromReact(LeakLineRight), 'rect');
G6.registerNode('VpcDotted', createNodeFromReact(VpcDotted), 'rect');
