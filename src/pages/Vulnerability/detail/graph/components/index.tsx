import NoData from '@/components/NoData';
import TzProDescriptions from '@/components/lib/ProComponents/TzProDescriptions';
import TzTypography from '@/components/lib/TzTypography';
import { useTranslate } from '@/locales/translate';
import RenderColWithIcon from '@/pages/components/RenderColWithPlatformIcon';
import { getAssetsById } from '@/services/cspm/Assets';
import { toDetailIntercept } from '@/utils';
import { CLOUD_HOST_ASSET_INFO } from '@/utils/constants';
import { history } from '@umijs/max';
import { get, keys } from 'lodash';
import React, { useEffect, useState } from 'react';
import { createPortal } from 'react-dom';
import './index.less';

export const NodeTooltips: React.FC<{
  x: number;
  y: number;
  className?: string;
  hash_id: string;
  visible: boolean;
  mouseenter: any;
  mouseleave: any;
}> = ({ x, y, hash_id, visible, mouseenter, mouseleave }) => {
  const [detailState, setDetailState] = useState<
    API_ASSETS.AssetsInfoResponse & { hash_id: string }
  >({} as any);
  const [loading, setLoading] = useState(true);
  const translate = useTranslate();
  const basicInfo = detailState?.infos?.basic_info;

  useEffect(() => {
    if (!visible) {
      return;
    }
    setLoading(true);
    getAssetsById({
      hash_id,
    })
      .then((res) => {
        setDetailState(res as any);
      })
      .finally(() => {
        setLoading(false);
      });
  }, [visible]);

  return (
    <>
      {createPortal(
        <div
          className={`node-tooltip ${visible ? 'open' : ''}`}
          style={{ bottom: `${y}px`, left: `${x}px` }}
          onMouseEnter={mouseenter}
          onMouseLeave={mouseleave}
        >
          {!loading && !basicInfo ? (
            <NoData size={'middle'} />
          ) : (
            <>
              {!loading && (
                <div className={'name-id-label-9'}>
                  <TzTypography.Paragraph
                    ellipsis={{ rows: 1, tooltip: detailState.instance_name }}
                    className={'b_name_k3'}
                    onClick={() => {
                      mouseleave();
                      setTimeout(() => {
                        const instance_id = detailState.hash_id;
                        toDetailIntercept(
                          { type: 'asset', id: instance_id },
                          () => history.push(`/asset/info/${instance_id}`),
                        );
                      }, 200);
                    }}
                  >
                    {detailState.instance_name || '-'}
                  </TzTypography.Paragraph>
                  {/* <TzTypography.Paragraph
                    className={'gray-v3'}
                    style={{ maxWidth: '60%' }}
                    ellipsis={{ rows: 1, tooltip: detailState.instance_id }}
                  >
                    {detailState.instance_id || '-'}
                  </TzTypography.Paragraph> */}
                </div>
              )}
              <TzProDescriptions
                loading={loading}
                column={1}
                dataSource={detailState}
                columns={[
                  {
                    title: translate('instanceId'),
                    key: 'instance_id',
                    dataIndex: 'instance_id',
                    tzCopyable: true,
                  },
                  {
                    title: translate('cloudServices'),
                    key: 'platform',
                    dataIndex: 'platform',
                    // className: 'btn-row',
                    render(txt: string, record: API_ASSETS.AssetsInfoResponse) {
                      return (
                        <RenderColWithIcon
                          name={record.service_name}
                          platform={txt as string}
                        />
                      );
                    },
                  },
                  {
                    title: translate('region'),
                    key: 'region_name',
                    dataIndex: 'region_name',
                    tzEllipsis: true,
                  },
                ]}
              />
              <TzProDescriptions column={1} loading={loading}>
                {/*<TzProDescriptions.Item
                  span={1}
                  valueType="text"
                  contentStyle={{
                    maxWidth: '80%',
                  }}
                  tzCopyable
                  ellipsis
                  label={translate('instanceId')}
                >
                  {
                    renderTextWithPropmt(
                      detailState.instance_id,
                      detailState,
                      (e?: React.MouseEvent<HTMLDivElement>) => {
                        copy(dom as string);
                        message.success(
                          intl.formatMessage({ id: 'TzProDescriptions.copySuc' }),
                        );
                      },
                      'icon-fuzhi',
                    )
                  }
                  {detailState.instance_id || '-'}
                </TzProDescriptions.Item>
                <TzProDescriptions.Item
                  span={1}
                  valueType="text"
                  contentStyle={{
                    maxWidth: '80%',
                  }}
                  ellipsis
                  label={translate('cloudServices')}
                >
                  <RenderColWithIcon
                    className={'col-icon-plat-j1'}
                    platform={detailState?.platform}
                    name={detailState?.asset_type_name || '-'}
                  />
                </TzProDescriptions.Item>
                <TzProDescriptions.Item
                  span={1}
                  valueType="text"
                  contentStyle={{
                    maxWidth: '80%',
                  }}
                  ellipsis
                  label={translate('region')}
                >
                  {detailState?.region_name || '-'}
                </TzProDescriptions.Item> */}
                {keys(CLOUD_HOST_ASSET_INFO).map((k) => (
                  <TzProDescriptions.Item
                    key={k}
                    span={1}
                    valueType="text"
                    contentStyle={{
                      maxWidth: '80%',
                    }}
                    ellipsis
                    label={get(CLOUD_HOST_ASSET_INFO, k)}
                  >
                    {get(basicInfo, k) || '-'}
                  </TzProDescriptions.Item>
                ))}
              </TzProDescriptions>
            </>
          )}
        </div>,
        document.body,
      )}
    </>
  );
};
